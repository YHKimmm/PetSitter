// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetSitter.Models;

#nullable disable

namespace PetSitter.Migrations
{
    [DbContext(typeof(PetSitterContext))]
    [Migration("20230410201840_adminIssues")]
    partial class adminIssues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PetSitter.Models.Availability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("availabilityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.HasKey("AvailabilityId");

                    b.ToTable("Availability", (string)null);
                });

            modelBuilder.Entity("PetSitter.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<string>("Complaint")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("complaint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("Review")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("review");

                    b.Property<int?>("SitterId")
                        .HasColumnType("int")
                        .HasColumnName("sitterID");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("specialRequests");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("BookingId");

                    b.HasIndex("SitterId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("PetSitter.Models.BookingPet", b =>
                {
                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingID");

                    b.Property<int?>("PetId")
                        .HasColumnType("int")
                        .HasColumnName("petID");

                    b.HasKey("BookingId", "PetId");

                    b.HasIndex("PetId");

                    b.ToTable("BookingPet", (string)null);
                });

            modelBuilder.Entity("PetSitter.Models.IPN", b =>
                {
                    b.Property<string>("paymentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("create_time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("custom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("intent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payerCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payerMiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payerStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paymentID");

                    b.ToTable("IPNs");
                });

            modelBuilder.Entity("PetSitter.Models.Pet", b =>
                {
                    b.Property<int>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("petID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PetId"), 1L, 1);

                    b.Property<int?>("BirthYear")
                        .HasColumnType("int")
                        .HasColumnName("birthYear");

                    b.Property<string>("Instructions")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("instructions");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<byte[]>("PetImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PetSize")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("petSize");

                    b.Property<string>("PetType")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("petType");

                    b.Property<string>("Sex")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("sex")
                        .IsFixedLength();

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("PetId");

                    b.HasIndex("PetType");

                    b.HasIndex("UserId");

                    b.ToTable("Pet", (string)null);
                });

            modelBuilder.Entity("PetSitter.Models.PetType", b =>
                {
                    b.Property<string>("PetType1")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("petType");

                    b.HasKey("PetType1")
                        .HasName("PK__PetType__3408B3AE78D2F573");

                    b.ToTable("PetType", (string)null);
                });

            modelBuilder.Entity("PetSitter.Models.Sitter", b =>
                {
                    b.Property<int>("SitterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sitterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SitterId"), 1L, 1);

                    b.Property<string>("ProfileBio")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("profileBio");

                    b.Property<decimal?>("RatePerPetPerDay")
                        .HasColumnType("money")
                        .HasColumnName("ratePerPetPerDay");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("SitterId");

                    b.HasIndex("UserId");

                    b.ToTable("Sitter", (string)null);
                });

            modelBuilder.Entity("PetSitter.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("phoneNumber")
                        .IsFixedLength();

                    b.Property<string>("PostalCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("postalCode")
                        .IsFixedLength();

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("streetAddress");

                    b.Property<string>("UserType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("userType");

                    b.HasKey("UserId");

                    b.HasIndex("UserType");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("PetSitter.Models.UserType", b =>
                {
                    b.Property<string>("UserType1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("userType");

                    b.HasKey("UserType1")
                        .HasName("PK__UserType__73837898450D54D6");

                    b.ToTable("UserType", (string)null);
                });

            modelBuilder.Entity("SitterAvailability", b =>
                {
                    b.Property<int>("SitterId")
                        .HasColumnType("int")
                        .HasColumnName("sitterID");

                    b.Property<int>("AvailabilityId")
                        .HasColumnType("int")
                        .HasColumnName("availabilityID");

                    b.HasKey("SitterId", "AvailabilityId")
                        .HasName("PK__SitterAv__2595E50B9A99093F");

                    b.HasIndex("AvailabilityId");

                    b.ToTable("SitterAvailability", (string)null);
                });

            modelBuilder.Entity("SitterPetType", b =>
                {
                    b.Property<int>("SitterId")
                        .HasColumnType("int")
                        .HasColumnName("sitterID");

                    b.Property<string>("PetType")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("petType");

                    b.HasKey("SitterId", "PetType")
                        .HasName("PK__SitterPe__9D2BD2361D4E7ABE");

                    b.HasIndex("PetType");

                    b.ToTable("SitterPetType", (string)null);
                });

            modelBuilder.Entity("PetSitter.Models.Booking", b =>
                {
                    b.HasOne("PetSitter.Models.Sitter", "Sitter")
                        .WithMany("Bookings")
                        .HasForeignKey("SitterId")
                        .HasConstraintName("FK__Booking__userID__3B75D760");

                    b.HasOne("PetSitter.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Booking__userID__3C69FB99");

                    b.Navigation("Sitter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetSitter.Models.BookingPet", b =>
                {
                    b.HasOne("PetSitter.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__BookingPe__booki__3E52440B");

                    b.HasOne("PetSitter.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__BookingPe__petID__3F466844");

                    b.Navigation("Booking");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetSitter.Models.Pet", b =>
                {
                    b.HasOne("PetSitter.Models.PetType", "PetTypeNavigation")
                        .WithMany("Pets")
                        .HasForeignKey("PetType")
                        .HasConstraintName("FK__Pet__petType__32E0915F");

                    b.HasOne("PetSitter.Models.User", "User")
                        .WithMany("Pets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Pet__userID__31EC6D26");

                    b.Navigation("PetTypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetSitter.Models.Sitter", b =>
                {
                    b.HasOne("PetSitter.Models.User", "User")
                        .WithMany("Sitters")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Sitter__userID__29572725");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetSitter.Models.User", b =>
                {
                    b.HasOne("PetSitter.Models.UserType", "UserTypeNavigation")
                        .WithMany("Users")
                        .HasForeignKey("UserType")
                        .HasConstraintName("FK__User__userType__267ABA7A");

                    b.Navigation("UserTypeNavigation");
                });

            modelBuilder.Entity("SitterAvailability", b =>
                {
                    b.HasOne("PetSitter.Models.Availability", null)
                        .WithMany()
                        .HasForeignKey("AvailabilityId")
                        .IsRequired()
                        .HasConstraintName("FK__SitterAva__avail__38996AB5");

                    b.HasOne("PetSitter.Models.Sitter", null)
                        .WithMany()
                        .HasForeignKey("SitterId")
                        .IsRequired()
                        .HasConstraintName("FK__SitterAva__sitte__37A5467C");
                });

            modelBuilder.Entity("SitterPetType", b =>
                {
                    b.HasOne("PetSitter.Models.PetType", null)
                        .WithMany()
                        .HasForeignKey("PetType")
                        .IsRequired()
                        .HasConstraintName("FK__SitterPet__petTy__2F10007B");

                    b.HasOne("PetSitter.Models.Sitter", null)
                        .WithMany()
                        .HasForeignKey("SitterId")
                        .IsRequired()
                        .HasConstraintName("FK__SitterPet__sitte__2E1BDC42");
                });

            modelBuilder.Entity("PetSitter.Models.PetType", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetSitter.Models.Sitter", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("PetSitter.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Pets");

                    b.Navigation("Sitters");
                });

            modelBuilder.Entity("PetSitter.Models.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
